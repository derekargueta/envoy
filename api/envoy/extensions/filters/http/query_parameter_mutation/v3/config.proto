syntax = "proto3";

package envoy.extensions.filters.http.query_parameter_mutation.v3;

import "envoy/config/core/v3/base.proto";

import "xds/annotations/v3/status.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.query_parameter_mutation.v3";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/query_parameter_mutation/v3;query_parameter_mutationv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Query Parameter Mutation]
// Query Parameter Mutation :ref:`configuration overview <config_http_filters_query_parameter_mutation>`.
// [#extension: envoy.filters.http.query_parameter_mutation]

message QueryParameterValueOption {
  // Describes the supported actions types for query parameter append action.
  enum QueryParameterAppendAction {
    // If the query parameter already exists, this action will result in:
    //
    // - Duplicate query parameter keys in the HTTP path.
    //
    // If the query parameter doesn't exist then this will add new query parameter with specified key and value.
    APPEND_IF_EXISTS_OR_ADD = 0;

    // This action will add the query parameter if it doesn't already exist. If the query parameter already exists
    // then this will be a no-op.
    ADD_IF_ABSENT = 1;

    // This action will overwrite the specified value by discarding any existing values if the query parameter already
    // exists. If the query parameter doesn't exist then this will add the query parameter with specified key and
    // value.
    OVERWRITE_IF_EXISTS_OR_ADD = 2;

    // This action will overwrite the specified value by discarding any existing values if the query parameter already
    // exists. If the query parameter doesn't exist then this will be no-op.
    OVERWRITE_IF_EXISTS = 3;
  }

  QueryParameterAppendAction append_action = 1;

  // Query parameter that this operation applies to.
  config.core.v3.QueryParameter query_parameter = 2;
}

// Configures the Query Parameter Mutation filter.
message Config {
  // Specifies a list of HTTP query parameters that will be added to the HTTP path. Repeat values are supported. For example,
  // ``foo: 1, foo: 2`` will appear as "?foo=1&foo=2". Values are added as exact strings, command substitution is not supported.
  repeated QueryParameterValueOption query_parameters_to_add = 1;

  // Specifies a list of HTTP query parameters that will be removed from the HTTP path.
  repeated string query_parameters_to_remove = 2;
}
