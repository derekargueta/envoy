syntax = "proto3";

package envoy.extensions.filters.http.header_mutation.v3;

import "envoy/config/common/mutation_rules/v3/mutation_rules.proto";
import "envoy/config/core/v3/base.proto";

import "udpa/annotations/status.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.header_mutation.v3";
option java_outer_classname = "HeaderMutationProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/header_mutation/v3;header_mutationv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Header mutation filter configuration]
// [#extension: envoy.filters.http.header_mutation]

message QueryParameterValueOption {
  // Describes the supported actions types for query parameter append action.
  enum QueryParameterAppendAction {
    // If the query parameter already exists, this action will result in:
    //
    // - Duplicate query parameter keys in the HTTP path.
    //
    // If the query parameter doesn't exist then this will add new query parameter with specified key and value.
    APPEND_IF_EXISTS_OR_ADD = 0;

    // This action will add the query parameter if it doesn't already exist. If the query parameter already exists
    // then this will be a no-op.
    ADD_IF_ABSENT = 1;

    // This action will overwrite the specified value by discarding any existing values if the query parameter already
    // exists. If the query parameter doesn't exist then this will add the query parameter with specified key and
    // value.
    OVERWRITE_IF_EXISTS_OR_ADD = 2;

    // This action will overwrite the specified value by discarding any existing values if the query parameter already
    // exists. If the query parameter doesn't exist then this will be no-op.
    OVERWRITE_IF_EXISTS = 3;
  }

  QueryParameterAppendAction append_action = 1;

  // Query parameter that this operation applies to.
  config.core.v3.QueryParameter query_parameter = 2;
}

message Mutations {
  // The request mutations are applied before the request is forwarded to the upstream cluster.
  repeated config.common.mutation_rules.v3.HeaderMutation request_mutations = 1;

  // The response mutations are applied before the response is sent to the downstream client.
  repeated config.common.mutation_rules.v3.HeaderMutation response_mutations = 2;

  // Specifies a list of HTTP query parameters that will be added to the HTTP path. Repeat values are supported. For example,
  // ``foo: 1, foo: 2`` will appear as "?foo=1&foo=2". Values are added as exact strings, command substitution is not supported.
  repeated QueryParameterValueOption query_parameters_to_add = 3;

  // Specifies a list of HTTP query parameters that will be removed from the HTTP path.
  repeated string query_parameters_to_remove = 4;
}

// Per route configuration for the header mutation filter.
message HeaderMutationPerRoute {
  Mutations mutations = 1;
}

// Configuration for the header mutation filter. The mutation rules in the filter configuration will
// always be applied first and then the per-route mutation rules, if both are specified.
message HeaderMutation {
  Mutations mutations = 1;

  // If per route HeaderMutationPerRoute config is configured at multiple route levels, header mutations
  // at all specified levels are evaluated. By default, the order is from most specific (i.e. route entry level)
  // to least specific (i.e. route configuration level). Later header mutations may override earlier mutations.
  //
  // This order can be reversed by setting this field to true. In other words, most specific level mutation
  // is evaluated last.
  bool most_specific_header_mutations_wins = 2;
}
